{"version":3,"sources":["../../src/graphql/index.ts","../../node_modules/@angular/core/@angular lazy","../../src lazy","../../src/pages/root-nav/root-nav.ts","../../src/pages/home/home.ts","../../src/pages/timeline/timeline.ts","../../src/modals/new-message/new-message.ts","../../src/app/main.ts","../../src/app/app.module.ts","../../src/app/app.component.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport gql from 'graphql-tag';\nimport { Apollo } from 'apollo-angular';\nimport { Observable } from 'rxjs/Observable';\nimport {\n  UsersQuery,\n  LatestMessagesQuery,\n  PostMessageMutation,\n  PostMessageMutationVariables,\n  AddMessageSubscription,\n} from './types';\n\nconst users = gql`\n  fragment UserSummary on User {\n    id, name, avatar,\n  }\n\n  query Users {\n    allUsers(last: 150) {\n      ...UserSummary,\n    }\n  }\n`;\n\n// 直近40件のメッセージを取得するクエリ\nconst latestMessages = gql`\nfragment MsgDetail on Message {\n  id, createdAt, body, updatedAt, createdAt,\n  author {\n    id, name, avatar\n  }\n}\n\nquery LatestMessages {\n  allMessages(last: 40, orderBy: createdAt_ASC) {\n    ...MsgDetail,\n  }\n}`;\n\n// メッセージを書き込むmutation\nconst postMessage = gql`\nmutation PostMessage($body: String!, $authorId: ID) {\n  createMessage(body: $body, authorId: $authorId) {\n    id,\n  }\n}`;\n\n// メッセージの追加を監視するGraphQL Suscription\nconst onAddMessage = gql`\nsubscription AddMessage {\n  Message(\n    filter: {}\n  ) {\n    mutation,\n    node {\n      id, createdAt, body, updatedAt, createdAt,\n      author {\n        id, name, avatar\n      }\n    }\n  }\n}`;\n\n@Injectable()\nexport class GqlClient {\n  constructor(\n    public apollo: Apollo,\n  ) {\n  }\n\n  queryUsers() {\n    return this.apollo.query<UsersQuery>({\n      query: users,\n      fetchPolicy: 'network-only',\n    });\n  }\n\n  queryLatestMessages() {\n    return this.apollo.query<LatestMessagesQuery>({\n      query: latestMessages,\n      fetchPolicy: 'network-only'\n    });\n  }\n\n  postNewMessage(variables: PostMessageMutationVariables) {\n    return this.apollo.mutate<PostMessageMutation>({\n      mutation: postMessage,\n      variables,\n    });\n  }\n\n  subscribeNewMessage() {\n    return this.apollo.subscribe({\n      query: onAddMessage,\n    }) as Observable<AddMessageSubscription>;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/graphql/index.ts","function webpackEmptyAsyncContext(req) {\n\treturn new Promise(function(resolve, reject) { reject(new Error(\"Cannot find module '\" + req + \"'.\")); });\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 213;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/core/@angular lazy\n// module id = 213\n// module chunks = 0","function webpackEmptyAsyncContext(req) {\n\treturn new Promise(function(resolve, reject) { reject(new Error(\"Cannot find module '\" + req + \"'.\")); });\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 255;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src lazy\n// module id = 255\n// module chunks = 0","import { Component } from '@angular/core';\nimport { HomePage } from '../home/home';\n\n@Component({\n  template: `\n    <ion-nav [root]=\"rootPage\"></ion-nav>\n  `,\n})\nexport class RootNavPage {\n  get rootPage() {\n    return HomePage;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/root-nav/root-nav.ts","import { Component } from '@angular/core';\nimport { SplashScreen } from '@ionic-native/splash-screen';\nimport { NavController} from 'ionic-angular';\nimport { Observable } from 'rxjs/Observable';\nimport { TimelinePage } from '../timeline/timeline';\nimport { GqlClient } from '../../graphql';\nimport { UserSummaryFragment } from '../../graphql/types';\n\n@Component({\n  selector: 'page-home',\n  template: `\n    <ion-header>\n      <ion-navbar>\n        <ion-title>だれ？</ion-title>\n      </ion-navbar>\n    </ion-header>\n    <ion-content>\n      <ion-list>\n        <button ion-item *ngFor=\"let user of users$ | async\" (click)=\"selectUser(user)\">\n          <ion-avatar>\n            <img [src]=\"user.avatar\" *ngIf=\"user.avatar\">\n            <ion-icon name=\"contact\" [style.color]=\"'#F0F0F0'\" [style.fontSize.px]=\"38\" *ngIf=\"!user.avatar\"></ion-icon>\n            <span class=\"name\">{{user.name}}</span>\n          </ion-avatar>\n        </button>\n      </ion-list>\n    </ion-content>\n  `,\n})\nexport class HomePage {\n\n  users$: Observable<UserSummaryFragment[]>;\n\n  constructor(\n    public navCtrl: NavController,\n    private gqlClient: GqlClient,\n    private splash: SplashScreen,\n  ) {\n    this.splash.show();\n    this.users$ = this.gqlClient.queryUsers().map(({ data }) => data.allUsers).do(() => this.splash.hide());\n  }\n\n  selectUser(user: UserSummaryFragment) {\n    this.navCtrl.push(TimelinePage, { user });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/home/home.ts","import { Component, OnInit } from '@angular/core';\nimport {\n  NavController,\n  ModalController,\n  Platform,\n  NavParams,\n} from 'ionic-angular';\nimport { Apollo } from 'apollo-angular';\nimport gql from 'graphql-tag';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { NewMessageModal } from '../../modals/new-message/new-message';\nimport { GqlClient } from '../../graphql';\nimport { UserSummaryFragment, MsgDetailFragment } from '../../graphql/types';\n\n@Component({\n  selector: 'page-contact',\n  template: `\n    <ion-header>\n      <ion-navbar>\n        <ion-title>Timeline</ion-title>\n        <ion-buttons end>\n          <button ion-button (click)=\"openModal()\">\n            <span ion-text color=\"primary\">Add</span>\n          </button>\n        </ion-buttons>\n      </ion-navbar>\n    </ion-header>\n    <ion-content>\n      <ng-container *ngIf=\"messages$\">\n        <ion-card *ngFor=\"let message of messages$ | async\">\n          <ion-item *ngIf=\"message.author\">\n            <ion-avatar item-start>\n              <img [src]=\"message.author.avatar\" *ngIf=\"message.author?.avatar\">\n              <ion-icon name=\"contact\" [style.color]=\"'#F0F0F0'\" [style.fontSize.px]=\"42\" *ngIf=\"!message.author.avatar\"></ion-icon>\n            </ion-avatar>\n            <h3>{{message.author.name}}</h3>\n          </ion-item>\n          <ion-item *ngIf=\"!message.author\">\n            <ion-avatar item-start>\n              <ion-icon name=\"ionitron\" [style.color]=\"'#488aff'\" [style.fontSize.px]=\"38\"></ion-icon>\n            </ion-avatar>\n            <h3>(anonymous user)</h3>\n          </ion-item>\n          <ion-card-content>\n            <p>{{message.body}}</p>\n          </ion-card-content>\n        </ion-card>\n      </ng-container>\n    </ion-content>\n  `,\n})\nexport class TimelinePage implements OnInit {\n\n  me: UserSummaryFragment;\n  ownMessage$ = new Subject<MsgDetailFragment>();\n  messages$: Observable<MsgDetailFragment[]>;\n\n  constructor(\n    public navCtrl: NavController,\n    private navParams: NavParams,\n    private modalCtrl: ModalController,\n    private gqlClient: GqlClient,\n  ) {\n  }\n\n  ngOnInit() {\n    this.me = this.navParams.get('user');\n\n    // 1. Queryで取得した既存メッセージをObservable<MsgDetailFragment>へ変換\n    const latestMessage$ = this.gqlClient.queryLatestMessages()\n      .flatMap(({ data }) => Observable.from(data.allMessages));\n\n    // 2. Mutationによる自分で書いたメッセージのStream\n    const ownMessage$ = this.ownMessage$.asObservable();\n\n    // 3. Subscriptionによる新着メッセージをObservable<MsgDetailFragment>へ変換\n    const addMessage$ = this.gqlClient.subscribeNewMessage().map(({ Message }) => Message.node);\n\n    // 4. 上記をmergeし、scan\n    this.messages$ = Observable.merge(latestMessage$, ownMessage$, addMessage$)\n      .distinct(({ id }) => id).scan((acc, message) => [message, ...acc], []);\n  }\n\n  openModal() {\n    const modal = this.modalCtrl.create(NewMessageModal, { author: this.me });\n    modal.onDidDismiss(message => this.ownMessage$.next(message));\n    modal.present();\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/timeline/timeline.ts","import { Component, ViewChild } from '@angular/core';\nimport {\n  Platform,\n  NavParams,\n  ViewController,\n  TextInput\n} from 'ionic-angular';\nimport gql from 'graphql-tag';\nimport { GqlClient } from '../../graphql';\n\n@Component({\n  selector: 'new-message-modal',\n  template: `\n  <ion-header>\n    <ion-toolbar>\n      <ion-buttons start>\n        <button ion-button (click)=\"dismiss()\">\n          <span ion-text color=\"primary\">Cancel</span>\n        </button>\n      </ion-buttons>\n      <ion-title>New Message</ion-title>\n      <ion-buttons end>\n        <button ion-button (click)=\"submit()\">\n          <span ion-text color=\"primary\">Submit</span>\n        </button>\n      </ion-buttons>\n    </ion-toolbar>\n  </ion-header>\n  <ion-content>\n    <ion-textarea #message [(ngModel)]=\"text\" placeholder=\"何か書くべし\"></ion-textarea>\n  </ion-content>\n  `\n})\nexport class NewMessageModal {\n\n  @ViewChild('message') textArea: TextInput;\n  text: string = \"\";\n\n  constructor(\n    private gqlClient: GqlClient,\n    public platform: Platform,\n    public navParams: NavParams,\n    public viewCtrl: ViewController,\n  ) { }\n\n  ionViewDidEnter() {\n    setTimeout(() => this.textArea.setFocus(), 150);\n  }\n\n  submit() {\n    if (!this.text.length) return;\n    this.gqlClient.postNewMessage({\n      authorId: this.navParams.get('author').id || null,\n      body: this.text,\n    }).first().subscribe(x => {\n      const id = x.data.createMessage.id;\n      this.viewCtrl.dismiss({\n        id,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        body: this.text,\n        author: this.navParams.get('author'),\n      });\n    });\n  }\n\n  dismiss() {\n    this.viewCtrl.dismiss();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/modals/new-message/new-message.ts","import \"rxjs/Observable\";\nimport \"rxjs/add/operator/take\";\nimport \"rxjs/add/operator/withLatestFrom\";\nimport \"rxjs/add/operator/map\";\nimport \"rxjs/add/operator/distinct\";\nimport \"rxjs/add/operator/scan\";\nimport \"rxjs/add/operator/switchMap\";\n\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/main.ts","import { NgModule, ErrorHandler } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { IonicApp, IonicModule, IonicErrorHandler } from 'ionic-angular';\nimport { MyApp } from './app.component';\n\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { SplashScreen } from '@ionic-native/splash-screen';\nimport { CloudSettings, CloudModule } from '@ionic/cloud-angular';\n\nimport { ApolloClient, createNetworkInterface } from 'apollo-client';\nimport { SubscriptionClient, addGraphQLSubscriptions } from 'subscriptions-transport-ws';\nimport { ApolloModule } from 'apollo-angular';\n\nimport { GqlClient } from '../graphql/index';\nimport { RootNavPage } from '../pages/root-nav/root-nav';\nimport { HomePage } from '../pages/home/home';\nimport { TimelinePage } from '../pages/timeline/timeline';\nimport { NewMessageModal } from '../modals/new-message/new-message';\n\nexport const networkInterface = createNetworkInterface({\n  uri: 'https://api.graph.cool/simple/v1/cj5w8vqez05b50105pzg1erpt',\n});\n\nexport const wsClient = new SubscriptionClient('wss://subscriptions.ap-northeast-1.graph.cool/v1/cj5w8vqez05b50105pzg1erpt', {\n  reconnect: true,\n});\n\nexport const client = new ApolloClient({\n  dataIdFromObject: (x: any) => x.id,\n  networkInterface: addGraphQLSubscriptions(networkInterface, wsClient),\n});\n\nexport function provideClient(): ApolloClient {\n  return client;\n}\n\nexport const cloudSettings: CloudSettings = {\n  core: {\n    app_id: '59554521',\n  },\n};\n\n@NgModule({\n  declarations: [\n    MyApp,\n    RootNavPage,\n    HomePage,\n    TimelinePage,\n    NewMessageModal,\n  ],\n  imports: [\n    BrowserModule,\n    IonicModule.forRoot(MyApp),\n    ApolloModule.forRoot(provideClient),\n    CloudModule.forRoot(cloudSettings),\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    MyApp,\n    RootNavPage,\n    HomePage,\n    TimelinePage,\n    NewMessageModal,\n  ],\n  providers: [\n    StatusBar,\n    SplashScreen,\n    GqlClient,\n    { provide: ErrorHandler, useClass: IonicErrorHandler }\n  ]\n})\nexport class AppModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Component } from '@angular/core';\nimport { Platform } from 'ionic-angular';\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { SplashScreen } from '@ionic-native/splash-screen';\n\nimport { RootNavPage } from '../pages/root-nav/root-nav';\n\n@Component({\n  templateUrl: 'app.html'\n})\nexport class MyApp {\n  rootPage:any = RootNavPage;\n\n  constructor(platform: Platform, statusBar: StatusBar, splashScreen: SplashScreen) {\n    platform.ready().then(() => {\n      // Okay, so the platform is ready and our plugins are available.\n      // Here you can do any higher level native things you might need.\n      statusBar.styleDefault();\n      splashScreen.hide();\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts"],"sourceRoot":""}